[project]
name = "ha-escpos-thermal-printer"
version = "0.1.1"
description = "Network thermal printer integration for Home Assistant using ESC/POS protocol"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  "python-escpos==3.1",
  "Pillow==11.0.0",
  "qrcode==8.2",
  "python-barcode==0.16.1"
]

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["custom_components*", "scripts*"]

[project.optional-dependencies]
# Define pip extras so CI can install tooling via
# `pip install -e .[dev,security]`
dev = [
    "pytest>=8.3.3",
    "pytest-homeassistant-custom-component>=0.13.184",
    "mypy>=1.8.0",
    "ruff>=0.4.0",
    "pre-commit>=3.6.0",
    "safety>=3.0.0",
    "bandit>=1.7.0",
    "pip-audit>=2.7.0",
    # Pin typer for Safety CLI compatibility
    "typer<0.13",
    # Pin marshmallow for Safety schema compatibility
    "marshmallow<4",
    # Address GHSA-9548-qrrj-x5pj: ensure safe aiohttp version in dev env
    "aiohttp>=3.12.14",
    # Address cryptography advisory: ensure safe version in dev env
    "cryptography>=44.0.1",
    # Address Jinja2 advisories: ensure safe version in dev env
    "jinja2>=3.1.6",
    # Address requests/urllib3 advisories in dev env
    "requests>=2.32.4",
    "urllib3>=2.5.0",
]
security = [
  "safety>=3.0.0",
  "bandit>=1.7.0",
  "pip-audit>=2.7.0",
  # ruff is used for security rule checks in scripts/security_scan.py
  "ruff>=0.4.0",
  # Pin typer for Safety CLI compatibility
  "typer<0.13",
  # Pin marshmallow for Safety schema compatibility
  "marshmallow<4",
  # Ensure safe aiohttp version in security scan environment
  "aiohttp>=3.12.14",
  # Ensure safe cryptography version in security scan environment
  "cryptography>=44.0.1",
  # Ensure safe Jinja2 version in security scan environment
  "jinja2>=3.1.6",
  # Ensure safe requests/urllib3 versions in security scan environment
  "requests>=2.32.4",
  "urllib3>=2.5.0",
]

[tool.pytest.ini_options]
addopts = "-q -m 'not integration'"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
  "integration: tests requiring HA runtime and network sockets",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "AIR",    # flake8-airflow (airflow specific, but good general rules)
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
    "C4",     # flake8-comprehensions
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # numpy-specific rules
    "AIR",    # flake8-airflow
    "PERF",   # perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging-format
    "S",      # flake8-bandit (security)
    "G",      # flake8-logging-format (additional)
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "FBT001",  # boolean positional arg in function definition
    "FBT002",  # boolean default positional argument
    "FBT003",  # boolean positional arg in function call
    "A003",    # class attribute shadows a python builtin
    "COM812",  # missing trailing comma
    "ISC001",  # implicitly concatenated string literals
    "Q000",    # single quotes found but double quotes preferred
    "Q001",    # single quote multiline found but double quotes preferred
    "Q002",    # single quote docstring found but double quotes preferred
    "Q003",    # change outer quotes to avoid escaping inner quotes
    "S101",    # use of assert detected
    "S110",    # try/except/pass allowed in cleanup or callbacks
    "S104",    # possible binding to all interfaces
    "T201",    # print found
    "PD",      # pandas
    "NPY",     # numpy
    "RUF012",  # mutable class attributes
    "TRY003",  # avoid specifying long messages outside exception class
    "TRY400",  # use logging.exception instead of logging.error
    "ERA001",  # found commented-out code
    "FIX002",  # line contains TODO
    "TD002",   # missing author in TODO
    "TD003",   # missing issue link in TODO
    "INP001",  # file is part of implicit namespace package
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "T201", "PLR2004", "SLF001"]
"custom_components/escpos_printer/__init__.py" = ["BLE001"]
"custom_components/escpos_printer/printer.py" = ["BLE001", "C901"]

[tool.ruff.lint.isort]
known-first-party = ["custom_components.escpos_printer"]
force-sort-within-sections = true

[tool.black]
line-length = 100
target-version = ['py312']

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "escpos.*",
    "PIL.*",
    "qrcode.*",
    "barcode.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["custom_components/escpos_printer"]
branch = true
parallel = true
sigterm = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/integration_tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "setup.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "import typing",
    "from typing import",
]
show_missing = true
skip_covered = false
skip_empty = false
precision = 2
fail_under = 85.0

[tool.coverage.html]
directory = "htmlcov"
title = "ESC/POS Thermal Printer Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

[dependency-groups]
dev = [
    "pytest>=8.3.3",
    "pytest-homeassistant-custom-component>=0.13.184",
    "mypy>=1.8.0",
    "ruff>=0.4.0",
    "pre-commit>=3.6.0",
    "safety>=3.0.0",
    "bandit>=1.7.0",
    "pip-audit>=2.7.0",
    "typer<0.13",
    "marshmallow<4",
    "aiohttp>=3.12.14",
    "cryptography>=44.0.1",
    "jinja2>=3.1.6",
    "requests>=2.32.4",
    "urllib3>=2.5.0",
]
security = [
    "safety>=3.0.0",
    "bandit>=1.7.0",
    "pip-audit>=2.7.0",
    "typer<0.13",
    "marshmallow<4",
    "aiohttp>=3.12.14",
    "cryptography>=44.0.1",
    "jinja2>=3.1.6",
    "requests>=2.32.4",
    "urllib3>=2.5.0",
]
