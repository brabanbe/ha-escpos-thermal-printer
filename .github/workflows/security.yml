name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,security]

      - name: Run security scan script
        run: |
          python scripts/security_scan.py --verbose

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: security_report.md

      - name: Safety - Dependency vulnerability scan
        run: |
          safety check --full-report --output safety-report.json || true

      - name: Bandit - Python security linting
        run: |
          bandit -r custom_components/escpos_printer -f json -o bandit-report.json || true

      - name: pip-audit - Dependency audit
        run: |
          pip-audit --format json --output pip-audit-report.json || true

      - name: Upload SARIF reports
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            safety-report.json
            bandit-report.json
            pip-audit-report.json
        continue-on-error: true

      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read security report if it exists
            const reportPath = 'security_report.md';
            let reportContent = '## üîí Security Scan Results\n\n';

            if (fs.existsSync(reportPath)) {
              const content = fs.readFileSync(reportPath, 'utf8');
              reportContent += content;
            } else {
              reportContent += 'Security scan completed. Check the "Security Scan Results" artifact for detailed findings.\n';
            }

            reportContent += '\n### üìä Scan Summary\n';
            reportContent += '- ‚úÖ Dependencies scanned for vulnerabilities\n';
            reportContent += '- ‚úÖ Python code scanned for security issues\n';
            reportContent += '- ‚úÖ Static analysis completed\n\n';

            reportContent += '### üîç Next Steps\n';
            reportContent += '1. Review any security findings in the uploaded artifacts\n';
            reportContent += '2. Address high and medium priority issues\n';
            reportContent += '3. Ensure dependencies are kept up to date\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });

      - name: Fail on high severity vulnerabilities
        run: |
          # Check for critical/high severity issues and fail if found
          if [ -f safety-report.json ]; then
            if grep -q '"severity":\s*"critical\|high"' safety-report.json; then
              echo "‚ùå Critical or high severity vulnerabilities found!"
              exit 1
            fi
          fi

          if [ -f bandit-report.json ]; then
            # Bandit uses severity levels: HIGH, MEDIUM, LOW
            if grep -q '"issue_severity":\s*"HIGH"' bandit-report.json; then
              echo "‚ùå High severity security issues found in code!"
              exit 1
            fi
          fi

          echo "‚úÖ No critical/high severity security issues found"
